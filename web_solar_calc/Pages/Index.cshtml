@page
@model IndexModel
@{
	ViewData["Title"] = "Home page";
}

<div>
	Draw a polygon on the map to calculate the <span style="font-weight: bold">nominal power</span> of a solar installation at that site. Double-click to complete the polygon.
	<div>Efficiency of energy conversion: <input id="efficiencyInput" type="number" min="0" max="100" value="100" />%</div>
	<div>Calculated nominal power: <span id="npCalc">0 kW</span></div>
</div>
<div id='map' style='width: 1200px; height: 600px;'></div>
<div id="menu">
	<!-- See a list of Mapbox-hosted public styles at -->
	<!-- https://docs.mapbox.com/api/maps/styles/#mapbox-styles -->
	<input id="streets-v11" type="radio" name="rtoggle" value="streets" checked="checked">
	<label for="streets-v11">streets</label>
	<input id="satellite-v9" type="radio" name="rtoggle" value="satellite">
	<label for="satellite-v9">satellite</label>
</div>
<div>Installation surface tilt: <input id="tiltInput" type="number" min="0" max="89" value="0" />°</div>
<div>Calculated surface area of installation: <span id="surfaceArea">0 m<sup>2</sup></span></div>
<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoiYmxhY2tuZXIiLCJhIjoiY2tvYW5ndWJjMGV4bTJub3l1bnNvY2s1dSJ9.8qakfP8PGFurxgMJOdYJ3g';
	var map = new mapboxgl.Map({
		container: 'map',
		style: 'mapbox://styles/mapbox/streets-v11',
		center: [-100, 41],
		zoom: 3
	});

	// Add zoom and rotation controls to the map.
	map.addControl(new mapboxgl.NavigationControl());

	// add a geocoding search bar
	const geocoder = new MapboxGeocoder({
		accessToken: mapboxgl.accessToken,
		zoom: 17,
		placeholder: 'Search for USA address',
		mapboxgl: mapboxgl
	});

	// limit search to america
	geocoder.setCountries('us');

	// Add the control to the top-left area of the map
	map.addControl(geocoder, 'top-left');

	// set up radio buttons to change map's style
	var layerList = document.getElementById('menu');
	var inputs = layerList.getElementsByTagName('input');

	function switchLayer(layer)
	{
		var layerId = layer.target.id;
		map.setStyle('mapbox://styles/mapbox/' + layerId);
	}

	for (var i = 0; i < inputs.length; i++)
		inputs[i].onclick = switchLayer;

	// ctrl to allow drawing a polygon on the map
	var draw = new MapboxDraw({
		displayControlsDefault: false,
		controls: {
			polygon: true,
			trash: true
		},
		defaultMode: 'draw_polygon'
	});
	map.addControl(draw);

	map.on('draw.create', onPolygonChange);
	map.on('draw.delete', onPolygonChange);
	map.on('draw.update', onPolygonChange);

	// called when the user adds/removes/updates a polygon. Updates the nominal power
	// and surface area calculations
	function onPolygonChange()
	{
		updateNomPower();
		updateSurfaceArea();
	}

	// updates the nominal power calculation
	function updateNomPower()
	{
		var data = draw.getAll();
		var answer = document.getElementById('npCalc');
		if (data.features.length > 0)
		{
			var area = turf.area(data);
			// get the efficiency
			const eff = parseFloat(document.getElementById("efficiencyInput").value) / 100;
			// get the power assuming 1kW per square meter
			let power = eff * area;

			// round the result
			power = Math.round(power * 100) / 100;
			// format with commas (https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript)
			power = power.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

			answer.innerHTML = power + " kW";
		}
		else
			answer.innerHTML = '0 kW';
	}

	// called when the efficiency input is changed. Updates the nominal power value
	function onEfficiencyChange()
	{
		const eff = document.getElementById("efficiencyInput");
		const currValue = parseFloat(eff.value);

		// validate the input
		if (currValue < 0)
			eff.value = "0";
		else if (currValue > 100)
			eff.value = "100";

		// recalculate the nominal power
		updateNomPower(null);
	}

	document.getElementById("efficiencyInput").onchange = onEfficiencyChange;

	// called when the surface tilt value is changed. Updates the surface area calculation
	function onTiltChange()
	{
		const tilt = document.getElementById("tiltInput");
		const currValue = parseFloat(tilt.value);

		// validate the input
		if (currValue < 0)
			tilt.value = "0";
		else if (currValue > 89)
			tilt.value = "89";

		// recalculate the surface area
		updateSurfaceArea();
	}

	document.getElementById("tiltInput").onchange = onTiltChange;

	// updates the surface area calculation
	function updateSurfaceArea()
	{
		var data = draw.getAll();
		var answer = document.getElementById('surfaceArea');
		if (data.features.length > 0)
		{
			var area = turf.area(data);
			// get the tilt
			let tilt = parseFloat(document.getElementById("tiltInput").value);
			// convert to radians...
			tilt *= Math.PI / 180;

			// get the projected area
			// we need to divide because the angle is defined as the angle between the surface and the ground,
			// and we want to project onto that surface
			area /= Math.cos(tilt);

			// round the result
			area = Math.round(area * 100) / 100;
			// format with commas (https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript)
			area = area.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

			answer.innerHTML = area + " m<sup>2</sup>";
		}
		else
			answer.innerHTML = '0 m<sup>2</sup>';
	}

</script>